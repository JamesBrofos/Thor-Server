<br>
<p>A major benefit of the Thor Bayesian optimization framework is that it supports both sequential and parallel optimization. Thor supports both batch parallelism and asynchronous parallelism.</p>
<p>Utilizing distributed computing is easy with Thor. Suppose two processes (or two entirely separate computers) are tasked with optimizing the Hartmann 6-D function. We can suppose that an experiment has already been created with the name <code>"Hartmann 6-D"</code> (if you don't know how to programmatically create an experiment, please read <a href="{{ url_for("api.page", tab="introduction") }}">the introduction</a>). Each process can have access to the Hartmann 6-D experiment by querying for it as follows:</p>
<pre><code class="language-python"># Authenticate with Thor.
tc = ThorClient(auth_token)
exp = tc.experiment_for_name("Hartmann 6-D")</code></pre>
    <p>At this point, each process can sit in an optimization loop and make calls to the <code>exp.create_recommendation()</code> function. Thor has been engineered to handle parallel optimization in an intelligent way. In particular, Thor will be cognizant of the fact that certain parameter configurations are being evaluated by another machine and that the results of that evaluation are still pending. As a result, Thor will avoid redundancy by <it>not</it> reassigning those parameters to another process if it can be avoided.</p>
<br>
<h4>Retrieving pending observations</h4>
<p>In the event that a machine is unable to report an observation, you will have an observation remain in a pending state. This would occur, for example, if your machine ran out of memory, if your machine experienced a power outage, or if the system killed the process for taking too long. Fortunately, Thor can help you recover from these setbacks easily, and retrieving pending observations is achieved through a simple API call.</p>
<pre><code class="language-python"># Authenticate with Thor.
auth_token = "{{ current_user.auth_token }}"

# Retrieve the experiment with pending observations.
tc = ThorClient(auth_token)
exp = tc.experiment_for_name("YOUR_EXPERIMENT_NAME")

# Get a list of pending observations.
pending = exp.pending_recommendations()
</code></pre>





